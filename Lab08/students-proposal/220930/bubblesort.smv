-- {4, 1, 3, 2, 5}
--
--  l0 procedure bubbleSort( A : list of sortable items )
--  l1   n = length(A)
--  l2   repeat
--  l3     swapped = false
--  l4     for i = 1 to n-1 inclusive do
--           /* if this pair is out of order */
--  l5       if A[i-1] > A[i] then
--             /* swap them and remember something changed */
--  l6         swap( A[i-1], A[i] )
--  l7         swapped = true
--  l8       end if
--  l9     end for
-- l10   until not swapped
-- l11 end procedure

MODULE main
DEFINE
    n := 5;
VAR
    arr : array 0..n -1 of 1..5;
    swapped : boolean;
    i : 1..n -1;
    pc : {l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11};
ASSIGN
    init(arr[0]) := 4;
    init(arr[1]) := 1;
    init(arr[3]) := 3;
    init(arr[2]) := 2;
    init(arr[4]) := 5;

    init(pc) := l0;

    next(pc) := case
        pc = l0 : l1;
        pc = l1 : l2;
        pc = l2 : l3;
        pc = l3 : l4;
        pc = l4 & i < n -1 : l5;
        pc = l4 & i = n -1 : l9;
        pc = l5 & arr[i -1]  > arr[i] : l6;
        pc = l5 & arr[i -1] <= arr[i] : l8;
        pc = l6 : l7;
        pc = l7 : l8;
        pc = l8 : l9;
        pc = l9 & i < n -1: l4;
        pc = l9 & i = n -1: l10;
        pc = l10 &  swapped : l2;
        pc = l10 & !swapped : l11;
        pc = l11 : l11;
    esac;

    next(i) := case
        -- for loop, first iteration
        pc = l3 : 1;
        -- for loop, next iteration
        pc = l9 & i < n -1 : i +1;
        -- inside the for loop, i does not change,
        -- and elsewhere it remains uninitialized
        TRUE : i;
    esac;

    next(swapped) := case
        -- beginning of repeat-until loop
        pc = l3 : FALSE;
        -- out of order pair: swap the elements
        -- and remember something changed
        pc = l7 : TRUE;
        TRUE : swapped;
    esac;

    next(arr[0]) := case
        pc = l6 & i = 1 : arr[1];
        TRUE : arr[0];
    esac;

    next(arr[1]) := case
        pc = l6 & i = 1 : arr[0];
        pc = l6 & i = 2 : arr[2];
        TRUE : arr[1];
    esac;

    next(arr[2]) := case
        pc = l6 & i = 2 : arr[1];
        pc = l6 & i = 3 : arr[3];
        TRUE : arr[2];
    esac;

    next(arr[3]) := case
        pc = l6 & i = 3 : arr[2];
        pc = l6 & i = 4 : arr[4];
        TRUE : arr[3];
    esac;

    next(arr[4]) := case
        pc = l6 & i = 4 : arr[3];
        TRUE : arr[4];
    esac;

LTLSPEC ! F pc = l11;
LTLSPEC ! F G ( pc = l11 &
                arr[0] <= arr[1] &
                arr[1] <= arr[2] &
                arr[2] <= arr[3] &
                arr[3] <= arr[4]);
